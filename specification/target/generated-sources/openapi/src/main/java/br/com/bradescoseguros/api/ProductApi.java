/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.bradescoseguros.api;

import br.com.bradescoseguros.model.HomeInsuranceProduct;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-24T20:45:55.771840-03:00[America/Recife]")

@Validated
@Api(value = "product", description = "the product API")
public interface ProductApi {

    default ProductApiDelegate getDelegate() {
        return new ProductApiDelegate() {};
    }

    /**
     * GET /product/{productname} : Get home-insurance-product by home-insurance-product name
     *
     * @param productname The name that needs to be fetched. Use product1 for testing.  (required)
     * @return successful operation (status code 200)
     *         or Product not found (status code 404)
     */
    @ApiOperation(value = "Get home-insurance-product by home-insurance-product name", nickname = "getProductByName", notes = "", response = HomeInsuranceProduct.class, tags={ "home-insurance-product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HomeInsuranceProduct.class),
        @ApiResponse(code = 404, message = "Product not found") })
    @RequestMapping(value = "/product/{productname}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<HomeInsuranceProduct> getProductByName(@ApiParam(value = "The name that needs to be fetched. Use product1 for testing. ",required=true) @PathVariable("productname") String productname) {
        return getDelegate().getProductByName(productname);
    }

}
